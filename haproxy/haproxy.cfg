			global
				daemon
				maxconn 256
				log stdout  format raw  local0  debug
				stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
				stats socket 127.0.0.1:1999 level admin
				httpclient.ssl.verify none
				# Allow larger buffer size for return-file of argon scripts
				tune.bufsize 51200

			defaults
				log global
				mode http
				option httplog
				timeout connect 5000ms
				timeout client 50000ms
				timeout server 50000ms
				timeout tarpit 5000ms


			frontend http-in

				# Clearnet http (you'll have to figure out https yourself)
				bind *:80


				# drop requests with invalid host header
				#acl is_existing_vhost hdr(host),lower,map_str(/etc/haproxy/hosts.map) -m found
				#http-request silent-drop unless is_existing_vhost

				# debug only, /cdn-cgi/trace
				# http-request return status 200 content-type "text/plain; charset=utf-8" lf-file /etc/haproxy/trace.txt if { path /cdn-cgi/trace }

				# New Approach for blacklisting
				http-request deny if { hdr_ip(X-Forwarded-For) -f /etc/haproxy/ip_blacklist.acl }

				http-request deny if { hdr(User-Agent) -f /etc/haproxy/ua_blacklist.acl }

				# Track http requests per IP.
				http-request track-sc0 src table per_ip_rates

				# Deny request with HTTP status 429 if request exceeds 1rps at path /v2
				#http-request deny deny_status 429 if { sc_http_req_rate(0) gt 10 } { path /v2 }

				# Deny request with HTTP status 429 if request exceeds 1rps at path /v2 and add a 5 seconds delay in response.
				http-request tarpit deny_status 429 if { sc_http_req_rate(0) gt 1 } { path /v2 }

				# acl for lua check whitelisted IPs/subnets and some excluded paths
				acl is_excluded src,map_ip(/etc/haproxy/whitelist.map) -m found
				acl is_excluded path /favicon.ico #add more

				# X-Cache-Status header (may be sent in some non-cache responses because NOSRV can happen for other reasons, but should always be present in responses served by cache-use)
				http-response set-header X-Cache-Status HIT if !{ srv_id -m found }
				http-response set-header X-Cache-Status MISS if { srv_id -m found }

				capture request header Host len 200
			    capture request header X-Forwarded-For len 50
			    capture request header Referer len 200
			    capture request header User-Agent len 200
			    capture response header X-Request-ID len 50


				log-format '{"host":"%H","ident":"haproxy","pid":%pid,"time":"%Tl","haproxy":{"conn":{"act":%ac,"fe":%fc,"be":%bc,"srv":%sc},"queue":{"backend":%bq,"srv":%sq},"time":{"tq":%Tq,"tw":%Tw,"tc":%Tc,"tr":%Tr,"tt":%Tt},"termination_state":"%tsc","retries":%rc,"network":{"client_ip":"%ci","client_port":%cp,"frontend_ip":"%fi","frontend_port":%fp},"ssl":{"version":"%sslv","ciphers":"%sslc"},"request":{"method":"%HM","hu":"%HU",hp:"%HP",hq:"%HQ","protocol":"%HV","header":{"host":"%[capture.req.hdr(0),json(utf8s)]","xforwardfor":"%[capture.req.hdr(1),json(utf8s)]","referer":"%[capture.req.hdr(2),json(utf8s)]"}},"name":{"backend":"%b","frontend":"%ft","server":"%s"},"response":{"status_code":%ST,"header":{"xrequestid":"%[capture.res.hdr(0),json(utf8s)]"}},"bytes":{"uploaded":%U,"read":%B}}}' 

				# default_backend servers
				# route to a backend based on path's prefix
  				use_backend nginx-v1 if { path /v1 } || { path_beg /v2/ }
  				use_backend nginx-v2 if { path /v2 } || { path_beg /v2/ }

			cache basic_cache
				total-max-size 2500
				max-object-size 31457280
				max-age 86400

			backend per_ip_rates
 				stick-table type ip size 1m expire 10m store http_req_rate(1s)

			backend nginx-v1

				# simple example cache for files
				http-request set-var(txn.path) path
				acl can_cache var(txn.path) -i -m end .png .jpg .jpeg .jpe .ico .webmanifest .xml .apng .bmp .webp .pjpeg .jfif .gif .mp4 .webm .mov .mkv .svg .m4a .aac .flac .mp3 .ogg .wav .opus .txt .pdf .sid
				http-request cache-use basic_cache if can_cache
				http-response cache-store basic_cache if can_cache

				server nginx-v1 nginx-v1:81

			backend nginx-v2

				# simple example cache for files
				http-request set-var(txn.path) path
				acl can_cache var(txn.path) -i -m end .png .jpg .jpeg .jpe .ico .webmanifest .xml .apng .bmp .webp .pjpeg .jfif .gif .mp4 .webm .mov .mkv .svg .m4a .aac .flac .mp3 .ogg .wav .opus .txt .pdf .sid
				http-request cache-use basic_cache if can_cache
				http-response cache-store basic_cache if can_cache
				
				server nginx-v2 nginx-v2:82

