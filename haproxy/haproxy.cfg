			global
				daemon
				maxconn 256
				log stdout  format raw  local0  debug
				#lua-load /etc/haproxy/scripts/register.lua
				stats socket /var/run/haproxy.sock mode 666 level admin
				stats socket 127.0.0.1:1999 level admin
				httpclient.ssl.verify none
				# Allow larger buffer size for return-file of argon scripts
				tune.bufsize 51200

			defaults
				log global
				mode http
				option httplog
				timeout connect 5000ms
				timeout client 50000ms
				timeout server 50000ms
				timeout tarpit 5000ms


			frontend http-in

				# Clearnet http (you'll have to figure out https yourself)
				bind *:80


				# drop requests with invalid host header
				acl is_existing_vhost hdr(host),lower,map_str(/etc/haproxy/hosts.map) -m found
				http-request silent-drop unless is_existing_vhost

				# debug only, /cdn-cgi/trace
				# http-request return status 200 content-type "text/plain; charset=utf-8" lf-file /etc/haproxy/trace.txt if { path /cdn-cgi/trace }

				# acl for blocked IPs/subnets
				acl blocked_ip_or_subnet src,map_ip(/etc/haproxy/blocked.map) -m found
				http-request deny deny_status 403 if blocked_ip_or_subnet

				# acl for lua check whitelisted IPs/subnets and some excluded paths
				acl is_excluded src,map_ip(/etc/haproxy/whitelist.map) -m found
				acl is_excluded path /favicon.ico #add more

				# create acl for bools updated by lua
				#acl captcha_passed var(txn.captcha_passed) -m bool
				#acl pow_passed var(txn.pow_passed) -m bool
				#acl validate_captcha var(txn.validate_captcha) -m bool
				#acl validate_pow var(txn.validate_pow) -m bool

				# check pow/captcha and show page if necessary
				# acl on_captcha_url path /bot-check
				# http-request use-service lua.hcaptcha-view	if on_captcha_url !is_excluded

				# challenge decisions, checking, and redirecting to /bot-check
				#http-request lua.decide-checks-necessary 	if !is_excluded !on_captcha_url ddos_mode_enabled
				#http-request lua.hcaptcha-check				if !is_excluded !on_captcha_url validate_captcha
				#http-request lua.pow-check					if !is_excluded !on_captcha_url validate_pow OR !is_excluded !on_captcha_url ddos_mode_enabled_override
				#http-request redirect location /bot-check?%[capture.req.uri] code 302 if validate_captcha !captcha_passed !on_captcha_url ddos_mode_enabled !is_excluded OR validate_pow !pow_passed !on_captcha_url ddos_mode_enabled !is_excluded OR !pow_passed ddos_mode_enabled_override !on_captcha_url !is_excluded

				# X-Cache-Status header (may be sent in some non-cache responses because NOSRV can happen for other reasons, but should always be present in responses served by cache-use)
				http-response set-header X-Cache-Status HIT if !{ srv_id -m found }
				http-response set-header X-Cache-Status MISS if { srv_id -m found }

				capture request header Host len 40
			    capture request header X-Forwarded-For len 50
			    capture request header Referer len 200
			    capture request header User-Agent len 200
			    capture response header X-Request-ID len 50


				log-format '{"host":"%H","ident":"haproxy","pid":%pid,"time":"%Tl","haproxy":{"conn":{"act":%ac,"fe":%fc,"be":%bc,"srv":%sc},"queue":{"backend":%bq,"srv":%sq},"time":{"tq":%Tq,"tw":%Tw,"tc":%Tc,"tr":%Tr,"tt":%Tt},"termination_state":"%tsc","retries":%rc,"network":{"client_ip":"%ci","client_port":%cp,"frontend_ip":"%fi","frontend_port":%fp},"ssl":{"version":"%sslv","ciphers":"%sslc"},"request":{"method":"%HM","hu":"%HU",hp:"%HP",hq:"%HQ","protocol":"%HV","header":{"host":"%[capture.req.hdr(0),json(utf8s)]","xforwardfor":"%[capture.req.hdr(1),json(utf8s)]","referer":"%[capture.req.hdr(2),json(utf8s)]"}},"name":{"backend":"%b","frontend":"%ft","server":"%s"},"response":{"status_code":%ST,"header":{"xrequestid":"%[capture.res.hdr(0),json(utf8s)]"}},"bytes":{"uploaded":%U,"read":%B}}}' 

				default_backend servers

			cache basic_cache
				total-max-size 2500
				max-object-size 31457280
				max-age 86400

			backend servers

				# simple example cache for files
				http-request set-var(txn.path) path
				acl can_cache var(txn.path) -i -m end .png .jpg .jpeg .jpe .ico .webmanifest .xml .apng .bmp .webp .pjpeg .jfif .gif .mp4 .webm .mov .mkv .svg .m4a .aac .flac .mp3 .ogg .wav .opus .txt .pdf .sid
				http-request cache-use basic_cache if can_cache
				http-response cache-store basic_cache if can_cache

				# placeholder servers, activated by LUA or the control panel
			    # server-template websrv 1-100 0.0.0.0:80 check disabled
				# use server based on hostname
				# use-server %[req.hdr(host),lower,map(/etc/haproxy/backends.map)] if TRUE
				server websrv1 nginx:80

